<<<<<<< HEAD
label = "p.signif", method = "wilcox.test")
ggsave(paste0(path_github,"online/Graphs/responses.pdf"))
### Correct responses Gender Het
h <- round(mean(df.g$correct_response, na.rm = TRUE), digits = 1)
df.g %>%
ggplot(aes(y = correct_response, x = Treatments, color = Gender)) +
geom_boxplot() +
ylab("Num. Correct Responses") +
geom_hline(aes(yintercept = h), linetype = 2, color = "gray") +
geom_text(aes(y=h+0.5, label=paste0("Mean ", prettyNum(h,big.mark=",")), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
theme_gppr() +
ggsci::scale_color_jco() +
stat_compare_means(aes(group = Gender), label = "p.signif")+
theme(axis.title.y = element_text(vjust = +3),
plot.title = element_text(vjust = -1, size = 12),
#axis.ticks.x = element_blank(),
#axis.title.x = element_blank()
) +
scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0,8))
ggsave(paste0(path_github,"online/Graphs/responses_het_gender.pdf"))
### Correct Responses Heterogeneity Public/Private
h_res <- round(mean(df.g$correct_response, na.rm = TRUE), digits = 1)
df.g %>%
dplyr::select(correct_response, Treatments, Pension_Type)  %>%
ggplot(aes(y = correct_response, x = as.factor(Treatments), color = Pension_Type)) +
geom_boxplot() +
geom_hline(aes(yintercept = h_res), linetype = 2, color = "gray") +
geom_text(aes(y=h_res+0.5, label=paste0("Mean ", prettyNum(h_res,big.mark=",")), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0,8)) +
theme_gppr() +
scale_colour_brewer(type = "seq", palette = "Dark2", name = "Type of Pension")+
labs(x ="", y = "Num. Correct Response", title = "")  +
theme(axis.title.y = element_text(vjust = +3),
axis.ticks.x = element_blank(),
plot.title = element_text(vjust = -1, size = 12)) +
stat_compare_means(aes(group = Pension_Type), label = "p.signif")
ggsave(paste0(path_github,"online/Graphs/responses_het_pensiontype.pdf"))
#### Self reported measures
##########################################################
###### Confidence
h_co <- round(mean(as.numeric(df.g$Confidence), na.rm = TRUE), digits = 1)
df.g %>%
ggplot(aes(y = as.numeric(df.g$Confidence), x = as.factor(Treatments), color = Treatments)) +
geom_boxplot() +
geom_hline(aes(yintercept = h_co), linetype = 2, color = "gray") +
geom_text(aes(y=h_co+0.5, label=paste0("Mean ", prettyNum(h_co,big.mark=",")), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
scale_y_continuous(breaks = seq(0, 10, 2), limits = c(0,12)) +
theme_gppr() +
ggsci::scale_color_aaas() +
ggsci::scale_fill_aaas() +
ggpubr::stat_compare_means(comparisons = my_comparisons,
label = "p.signif", method = "wilcox.test")+
labs(x ="", y = "", title = "Confidence")  +
theme(axis.text.x=element_blank(),
axis.title.y = element_text(vjust = +6),
plot.title = element_text(vjust = -1, size = 12),
axis.ticks.x = element_blank())
###### overconfidence
df.g %>%
ggplot(aes(y = overconfidence, x = as.factor(Treatments), color = Treatments)) +
geom_boxplot() +
geom_hline(aes(yintercept = 0), linetype = 2, color = "gray") +
#scale_y_continuous(limits = c(0,0.2)) +
theme_gppr() +
ggsci::scale_color_aaas() +
ggsci::scale_fill_aaas() +
ggpubr::stat_compare_means(comparisons = my_comparisons,
label = "p.signif", method = "wilcox.test")+
labs(x ="", y = "Overconfidence", title = "")  +
theme(legend.position="none",
#axis.title.y = element_text(vjust = +6),
#plot.title = element_text(vjust = -1, size = 12),
axis.ticks.x = element_blank())
ggsave(paste0(path_github,"online/Graphs/overconfidence.pdf"))
#over confidence gender
df.g %>%
ggplot(aes(y = overconfidence, x = Treatments, color = Gender)) +
geom_boxplot() +
#geom_point(position = position_jitterdodge()) +
ylab("Overconfidence") + xlab("") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "gray") +
theme_gppr() +
ggsci::scale_color_jco() +
stat_compare_means(aes(group = Gender), label = "p.signif")+
theme(#axis.text.x=element_blank(),
axis.title.y = element_text(vjust = +3),
plot.title = element_text(vjust = -1, size = 12),
axis.ticks.x = element_blank(),
axis.title.x = element_blank()) #+
#scale_y_continuous(limits = c(0,0.15))
ggsave(paste0(path_github,"online/Graphs/overconfidence_het_gender.pdf"))
#Promoter
df.g %>%
ggplot(aes(y = overconfidence, x = as.factor(Treatments), color = Treatments)) +
geom_boxplot() +
geom_hline(aes(yintercept = 0), linetype = 2, color = "gray") +
#scale_y_continuous(limits = c(0,0.2)) +
theme_gppr() +
scale_colour_brewer(type = "seq", palette = "Dark2")+
ggpubr::stat_compare_means(comparisons = my_comparisons,
label = "p.signif", method = "wilcox.test")+
labs(x ="", y = "Overconfidence", title = "")  +
theme(legend.position="none",
#axis.title.y = element_text(vjust = +6),
#plot.title = element_text(vjust = -1, size = 12),
axis.ticks.x = element_blank())
ggsave(paste0(path_github,"online/Graphs/overconfidence.pdf"))
df.g %>%
ggplot(aes(y = overconfidence, x = as.factor(Treatments), color = Treatments)) +
geom_boxplot() +
geom_hline(aes(yintercept = 0), linetype = 2, color = "gray") +
#scale_y_continuous(limits = c(0,0.2)) +
theme_gppr() +
scale_colour_brewer(type = "seq", palette = "Dark2")+
ggpubr::stat_compare_means(comparisons = my_comparisons,
label = "p.signif", method = "wilcox.test")+
labs(x ="", y = "Overconfidence", title = "")  +
theme(legend.position="none",
#axis.title.y = element_text(vjust = +6),
#plot.title = element_text(vjust = -1, size = 12),
axis.ticks.x = element_blank())
ggsave(paste0(path_github,"online/Graphs/overconfidence.pdf"))
p <- df %>%
group_by(Treatments) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-5,]
View(prop_test)
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-5,]
View(p)
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-8,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out") + facet_wrap(Pension_type)
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out") + facet_wrap(prop_test$Pension_type)
View(prop_test)
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out") + facet_wrap(prop_test$Pension_type)
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity", position= dodge) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out") + facet_wrap(prop_test$Pension_type)
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Pension_Type)) +
geom_bar(stat="identity", position= dodge) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
p <- df %>%
group_by(Treatments) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-5,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, fill = Treatments)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank()) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
ggsave(paste0(path_github,"online/Graphs/OptOut.pdf"))
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= dodge) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= dodge) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high , position_dodge2(preserve = "single"))) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= position_dodge2(preserve = "single")) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high , position_dodge2(preserve = "single"))) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
View(prop_test)
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= position_dodge2()) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high , position_dodge2())) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= position_dodge2()) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position=position_dodge2())) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type)) +
geom_bar(stat="identity", position= "dodge2") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position="dodge2")) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type, fill =Pension_Type)) +
geom_bar(stat="identity", position= "dodge2") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position="dodge2")) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type, fill =Pension_Type)) +
geom_bar(stat="identity", position= "dodge2") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position="dodge2"),  color = Pension_Type) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type, fill =Pension_Type)) +
geom_bar(stat="identity", position= "dodge2") +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position="dodge2",  color = Pension_Type)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
prop_test %>%
ggplot(aes(x=Treatments, y=estimate, color = Pension_Type, fill =Pension_Type)) +
geom_bar(stat="identity", position= "dodge2",  color = Pension_Type) +
geom_errorbar(aes(ymin=conf.low, ymax = conf.high ,  position="dodge2",  color = Pension_Type)) +
theme_gppr() +
ggsci::scale_fill_aaas() +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0,1)) +
theme(axis.title.x=element_blank(),) +
geom_hline(aes(yintercept = 0.2), linetype = 2, color = "gray") +
geom_text(aes(y=0.2, label=paste0("0.2"), x=0.1), colour='gray', hjust=-0.1 , vjust = 1) +
ylab("Opt Out")
p <- df %>%
group_by(Treatments, Pension_Type) %>%
summarise(out = sum(OptOut =="Out", na.rm=T),
n = n()) %>%
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(out, n, conf.level = 0.95)))) %>%
tidyr::unnest(tst)
prop_test<-p[-9,]
View(prop_test)
################################
#### Ideas to test - not clean
#### author: Denise Laroze
################################
=======
Finished,
`Duration (in seconds)`,
Advisor,
Confused,
InfoUtil_1,
Facilidad,
Dificultad,
Dificultad_1_TEXT,
Recomendar,
Recomendar_NPS_GROUP,
SelectMode.PV,
SelectMode.under50,
total_reward,
contains("Math"),
contains("Q1"),
contains("Q2")) %>%
rename(MB_Despues = SelectMode.PV)
C_Privada <- C_Privada[,colSums(is.na(C_Privada))<nrow(C_Privada)]
# Encuesta C Publica, load and transformation
encuesta_C_Pu <- "Encuesta_C_publicas.csv"
C_Publica <- read_csv(paste0(path_datos, encuesta_C_Pu)) %>%
mutate(fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d")) %>%
mutate(EndDate = lubridate::ymd_hms(EndDate),
StartDate = lubridate::ymd_hms(StartDate),
encuesta = "C_Publica",
uemail = as.numeric(uemail),
total_reward = as.numeric(6500)
) %>%
#dplyr::filter(fecha  == "2022-05-20" | fecha  == "2022-05-27" | fecha == "2022-06-08" | fecha == "2022-06-07") %>%
filter(is.na(uemail)==FALSE) %>%
group_by(uemail) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
group_by(uemail) %>%
filter(StartDate==min(StartDate)) %>%
ungroup() %>%
select(fecha,
EndDate,
StartDate,
encuesta,
contains("Comp"),
uemail,
UID,
age,
perfil,
genero,
Progress,
Finished,
`Duration (in seconds)`,
Confused,
InfoUtil_1,
Facilidad,
Dificultad,
Dificultad_1_TEXT,
Recomendar,
Recomendar_NPS_GROUP,
SelectMode.PP,
SelectMode.under50,
PostuBene,
total_reward,
contains("Math"),
contains("Q1"),
contains("Q2")) %>%
rename(MB_Despues = SelectMode.PP)
C_Publica <- C_Publica[,colSums(is.na(C_Publica))<nrow(C_Publica)]
# Encuesta B Privada, computo de respuestas correctas
B_Privada <- B_Privada %>%
mutate(
ncomp1 = ifelse(Comp1.RP=="No", 1, ifelse(is.na(Comp1.RP), NA, 0)),
ncomp2=ifelse(Comp2.RP=="Solicitar el Certificado de Saldo en la AFP", 1, ifelse(is.na(Comp2.RP), NA, 0)),
ncomp3=ifelse(Comp3.RP=="No", 1, ifelse(is.na(Comp3.RP), NA, 0)),
ncomp4=ifelse(Comp4.RP=="Para comparar todas las ofertas de pensión disponibles en un sólo lugar", 1, ifelse(is.na(Comp4.RP), NA, 0)),
ncomp5=ifelse(Comp5.RP=="Sí", 1, ifelse(is.na(Comp5.RP), NA, 0)),
ncomp6=ifelse(Comp6.RP=="Es voluntario", 1, ifelse(is.na(Comp6.RP), NA, 0)),
ncomp7=ifelse(Comp7.RP=="El/la afiliado/a", 1, ifelse(is.na(Comp7.RP), NA, 0)),
ncomp8=ifelse(Comp1.RV=="No", 1, ifelse(is.na(Comp1.RV), NA, 0)),
ncomp9=ifelse(Comp2.RV=="Solicitar el Certificado de Saldo en la AFP", 1, ifelse(is.na(Comp2.RV), NA, 0)),
ncomp10=ifelse(Comp3.RV=="No", 1, ifelse(is.na(Comp3.RV), NA, 0)),
ncomp11=ifelse(Comp4.RV=="Para comparar todas las ofertas de pensión disponibles en un sólo lugar", 1, ifelse(is.na(Comp4.RV), NA, 0)),
ncomp12=ifelse(Comp5.RV=="Sí", 1, ifelse(is.na(Comp5.RV), NA, 0)),
ncomp13=ifelse(Comp6.RV=="Es voluntario", 1, ifelse(is.na(Comp6.RV), NA, 0)),
ncomp14=ifelse(Comp7.RV=="La Compañía de Seguros", 1, ifelse(is.na(Comp7.RV), NA, 0)),
ncomp15=ifelse(Comp1.MM=="No", 1, ifelse(is.na(Comp1.MM), NA, 0)),
ncomp16=ifelse(Comp2.MM=="Solicitar el Certificado de Saldo en la AFP", 1, ifelse(is.na(Comp2.MM), NA, 0)),
ncomp17=ifelse(Comp3.MM=="No", 1, ifelse(is.na(Comp3.MM), NA, 0)),
ncomp18=ifelse(Comp4.MM=="Para comparar todas las ofertas de pensión disponibles en un sólo lugar", 1, ifelse(is.na(Comp4.MM), NA, 0)),
ncomp19=ifelse(Comp5.MM=="Sí", 1, ifelse(is.na(Comp5.MM), NA, 0)),
ncomp20=ifelse(Comp6.MM=="Es voluntario", 1, ifelse(is.na(Comp6.MM), NA, 0)),
ncomp21=ifelse(Comp7.MM=="Ambos: la Compañía de Seguros y el/la afiliado/a", 1, ifelse(is.na(Comp7.MM), NA, 0))
)
ncomp<- B_Privada %>% select(contains("ncomp"))
B_Privada$correct_response <-rowSums(ncomp,na.rm = T)
B_Privada <- B_Privada %>%
mutate(
correct_response = rowSums(ncomp, na.rm = T)
) %>%
select(everything(), -contains("comp"))
#rm(ncomp)
# Encuesta B Publica, computo de respuestas correctas
B_Publica <- B_Publica %>%
mutate(
ncomp1 = ifelse(Comp1.PP=="A partir de los 65 años", 1, ifelse(is.na(Comp1.PP), NA, 0)),
ncomp2 = ifelse(Comp2.PP=="Tener ClaveÚnica", 1, ifelse(is.na(Comp2.PP), NA, 0)),
ncomp3 = ifelse(Comp3.PP=="Sí", 1, ifelse(is.na(Comp3.PP), NA, 0)),
ncomp4 = ifelse(Comp4.PP=="A través del Estado con los impuestos", 1, ifelse(is.na(Comp4.PP), NA, 0)),
ncomp5 = ifelse(Comp5.PP=="Por encontrarse dentro del 9% de mayores ingresos", 1, ifelse(is.na(Comp5.PP), NA, 0)),
ncomp6 = ifelse(Comp6.PP=="No", 1, ifelse(is.na(Comp6.PP), NA, 0)),
ncomp7 = ifelse(Comp7.PP=="$1.000.000", 1, ifelse(is.na(Comp7.PP), NA, 0))
)
ncomp<- B_Publica %>% select(contains("ncomp"))
B_Publica <- B_Publica %>%
mutate(
correct_response = rowSums(ncomp, na.rm = T)
) %>%
select(everything(), -contains("comp"))
#rm(ncomp)
# Merge encuestas B y C
segundas_encuestas <- bind_rows(B_Privada, B_Publica,
C_Publica, C_Privada) %>%
group_by(uemail) %>%
filter(StartDate==min(StartDate)) %>%
ungroup()
# Merge total encuestas A, B y C
encuestas <- encuestaA_online %>%
left_join(segundas_encuestas, by = c("useridn" = "uemail"))  %>%
mutate(second = ifelse(is.na(encuesta)==TRUE, "sin segunda encuesta", encuesta))
encuestas <- encuestas[,colSums(is.na(encuestas))<nrow(encuestas)]
saveRDS(encuestas, paste0(path_datos, "encuestas_clean_2.rds"))
>>>>>>> 0607321c99cb818207d18db5a6268bb58bf72a0e
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
#library(naniar)
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/"
path_datos <- "C:/Users/Usach/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
path_github <- "C:/Users/Usach/OneDrive - usach.cl/Documents/GitHub/Pensions-Website-Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
#sitios_sm <- readRDS(paste0(path_datos, "sitios_complete.rds"))
source(paste0(path_github,"online/R/paquetes.R"))
source(paste0(path_github,"online/R/funciones.R"))
#so
cr <- readRDS(paste0(path_datos, "encuestas_clean_2.rds"))
df <- readRDS(paste0(path_datos, "online_data.rds"))
cr <- readRDS(paste0(path_datos, "encuestas_clean_2.rds"))
##############################
########### Data Management
##############################
#Overconfidence
df$Confidence<-as.numeric(df$Confidence_1)
df$overconfidence<- (df$Confidence/10) / (df$correct_response/7)
View(df[, c("correct_response", "Confidence", "overconfidence")])
#Change opinion about advisor
df$Change_Advisor<-ifelse(df$PAdvice=="No" & df$Advisor=="No", "Maintain No",
ifelse (df$PAdvice=="No" & df$Advisor=="Sí", "> advisor",
ifelse(df$PAdvice=="Sí" & df$Advisor=="Sí", "Maintain Yes",
ifelse(df$PAdvice=="Sí" & df$Advisor=="No", "< advisor",
ifelse(df$PAdvice=="No lo ha pensado" & df$Advisor=="Sí", "> advisor",
ifelse(df$PAdvice=="No lo ha pensado" & df$Advisor=="No", "< advisor", "Error"
))))))
df$pb_d<-ifelse(df$present_bias>19999, "alto", "bajo")
### Alternative Financial Literacy
### Correct answers for Finantial Literacy Questions
#table(DF$QMath1)
df$QMath1b_correct<-ifelse(df$QMath1=="Más de $125.000.000",  1,
ifelse(is.na(df$QMath1), NA, 0))
#table(DF$QMath1, DF$QMath1_correct)
#table(DF$QMath2)
df$QMath2b_correct<-ifelse(df$QMath2=="Nunca se terminaría de pagar el crédito", 1,
ifelse(is.na(df$QMath1), NA, 0))
#table(DF$QMath2, DF$QMath2_correct)
tmp<-df[, c("QMath1b_correct", "QMath2b_correct") ]
tmp$financial_lit_b<-rowSums(tmp)
df$financial_lit_b<-tmp$financial_lit_b
rm(tmp)
<<<<<<< HEAD
###############################
df.f<-df[!is.na(df$correct_response),]
prop.table(table(df.f$genero))
names(df.f)
prop.table(table(df.f$Birth))
describe(df.f$Birth)
summary(df.f$Birth)
summary(as.numeric(df.f$Birth))
summary(2022-as.numeric(df.f$Birth))
prop.table(table(df.f$Educ))
prop.table(table(df.f$Tram_jubilacion))
df.pv<-df[df$Pension_Type=="Private",]
df.pp<-df[df$Pension_Type=="Public",]
df.pv<-df[df.f$Pension_Type=="Private",]
df.pv<-df[df.f$Pension_Type=="Private",]
table(df.f$Pension_Type)
192+258
=======
############################
names(cr$ncomp)
names(cr)
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/"
path_datos <- "C:/Users/Usach/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
path_github <- "C:/Users/Usach/OneDrive - usach.cl/Documents/GitHub/Pensions-Website-Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
#sitios_sm <- readRDS(paste0(path_datos, "sitios_complete.rds"))
source(paste0(path_github,"online/R/paquetes.R"))
source(paste0(path_github,"online/R/funciones.R"))
#source(paste0(path_github,"Online/R/etl_surveys.R"))
#source(paste0(path_github,"Online/R/etl_sites.R"))
#source(paste0(path_github,"Online/R/etl_complete.R"))
df <- readRDS(paste0(path_datos, "online_data.rds"))
cr <- readRDS(paste0(path_datos, "encuestas_clean_2.rds"))
##############################
###########
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/online/data/"
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/"
path_datos <- "C:/Users/Usach/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
path_github <- "C:/Users/Usach/OneDrive - usach.cl/Documents/GitHub/Pensions-Website-Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
source(paste0(path_github,"online/R/paquetes.R"))
source(paste0(path_github,"online/R/funciones.R"))
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
encuesta_B_Pri <- "Encuesta_B_Privada.csv"
B_Privada <- read_csv(paste0(path_datos, encuesta_B_Pri)) %>%
mutate(fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d")) %>%
mutate(EndDate = lubridate::ymd_hms(EndDate),
StartDate = lubridate::ymd_hms(StartDate),
encuesta = "B_Privada",
uemail = as.numeric(uemail),
total_reward = as.numeric(total_reward)) %>%
#dplyr::filter(fecha  == "2022-05-20" | fecha  == "2022-05-27" | fecha == "2022-06-08" | fecha == "2022-06-07") %>%
filter(is.na(uemail)==FALSE) %>%
group_by(uemail) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
group_by(uemail) %>%
filter(StartDate==min(StartDate)) %>%
ungroup() %>%
mutate(perfilfiltrar = ifelse(is.na(perfil), "no_filtrar",
ifelse(perfil==0, "no_filtrar", "filtrar"))) %>%
filter(perfilfiltrar != "filtrar") %>%
select(-perfilfiltrar,
EndDate,
StartDate,
encuesta,
contains("Comp"),
uemail,
UID,
age,
perfil,
genero,
Progress,
Finished,
`Duration (in seconds)`,
Advisor,
Recomendar,
SelectMode.PV,
SelectMode.under50,
Recomendar_NPS_GROUP,
Confused,
InfoUtil_1,
Curiosity_1,
Confidence_1 ,
esfuerzo,
Facilidad,
Dificultad,
Dificultad_1_TEXT,
total_reward,
contains("Math"),
contains("Q1"),
contains("Q2")
) %>%
rename(MB_Despues = SelectMode.PV)
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/"
path_datos <- "C:/Users/Usach/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
path_github <- "C:/Users/Usach/OneDrive - usach.cl/Documents/GitHub/Pensions-Website-Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,]
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(#fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
names(encuestaA_online)
### Encuestas ###
# Encuesta A, load and transformation
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/online/data/"
encuesta_A <- "Encuesta_A.csv"
encuestaA_online <- read_csv(paste0(path_datos, encuesta_A))[-1,] %>%
mutate(fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d"),
sitioderivado = case_when(
nchar(useridn) == 4  ~ stringi::stri_sub(UID, 8, 8),
nchar(useridn) == 3  ~ stringi::stri_sub(UID, 7, 7)),
useridn = as.numeric(useridn)) %>%
filter(is.na(useridn)==FALSE) %>%
group_by(useridn) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
select(-Status,
-IPAddress,
-RecordedDate,
-ResponseId,
-RecipientLastName,
-RecipientFirstName,
-RecipientEmail,
-ExternalReference,
-LocationLatitude,
-LocationLongitude,
-UserLanguage) %>% distinct()
# Encuesta B Privada, load and transformation
encuesta_B_Pri <- "Encuesta_B_Privada.csv"
B_Privada <- read_csv(paste0(path_datos, encuesta_B_Pri)) %>%
mutate(fecha = lubridate::as_date(EndDate, format = "%Y-%m-%d")) %>%
mutate(EndDate = lubridate::ymd_hms(EndDate),
StartDate = lubridate::ymd_hms(StartDate),
encuesta = "B_Privada",
uemail = as.numeric(uemail),
total_reward = as.numeric(total_reward)) %>%
#dplyr::filter(fecha  == "2022-05-20" | fecha  == "2022-05-27" | fecha == "2022-06-08" | fecha == "2022-06-07") %>%
filter(is.na(uemail)==FALSE) %>%
group_by(uemail) %>%
filter(Progress==max(Progress)) %>%
ungroup() %>%
group_by(uemail) %>%
filter(StartDate==min(StartDate)) %>%
ungroup() %>%
mutate(perfilfiltrar = ifelse(is.na(perfil), "no_filtrar",
ifelse(perfil==0, "no_filtrar", "filtrar"))) %>%
filter(perfilfiltrar != "filtrar") %>%
select(-perfilfiltrar,
EndDate,
StartDate,
encuesta,
contains("Comp"),
uemail,
UID,
age,
perfil,
genero,
Progress,
Finished,
`Duration (in seconds)`,
Advisor,
Recomendar,
SelectMode.PV,
SelectMode.under50,
Recomendar_NPS_GROUP,
Confused,
InfoUtil_1,
Curiosity_1,
Confidence_1 ,
esfuerzo,
Facilidad,
Dificultad,
Dificultad_1_TEXT,
total_reward,
contains("Math"),
contains("Q1"),
contains("Q2")
) %>%
rename(MB_Despues = SelectMode.PV)
>>>>>>> 0607321c99cb818207d18db5a6268bb58bf72a0e
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
#library(naniar)
#path_datos <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/"
<<<<<<< HEAD
path_datos <- "C:/Users/Denise Laroze/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
#setwd("C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/")
#path_github <- "C:/Users/Usuario/Documents/INVESTIGACION/MiInvestigacion/Pensions-Website-Design/Pilots/Superintendencia_de_Pensiones"
path_github <- "C:/Users/Denise Laroze/Documents/GitHub/Pensions Website Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
=======
path_datos <- "C:/Users/Usach/Dropbox/Sitios web/Datos Estudio Online/"
#path_datos <- "C:/Users/Profesor/Dropbox/Sitios web/Datos Estudio Online/"
# If you don´t use Rprojects functionality setwd
path_github <- "C:/Users/Usach/OneDrive - usach.cl/Documents/GitHub/Pensions-Website-Design/"
#path_github <- "C:/Users/Profesor/Documents/GitHub/Pensions-Website-Design/"
#sitios_sm <- readRDS(paste0(path_datos, "sitios_complete.rds"))
source(paste0(path_github,"online/R/paquetes.R"))
source(paste0(path_github,"online/R/funciones.R"))
#source(paste0(path_github,"Online/R/etl_surveys.R"))
#source(paste0(path_github,"Online/R/etl_sites.R"))
#source(paste0(path_github,"Online/R/etl_complete.R"))
>>>>>>> 0607321c99cb818207d18db5a6268bb58bf72a0e
df <- readRDS(paste0(path_datos, "online_data.rds"))

path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#A9A9A9") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#696969") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#696969") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#696969") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
View(summary_df.p)
View(filtered_df)
View(summary_df)
View(summary_df.p)
View(summary_df)
View(summary_df.p)
View(summary_df)
View(summary_df.p)
View(summary_df)
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
View(summary_df.p)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#696969") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/Online Data/"
df <- readRDS(paste0(path_datos, "online_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#A9A9A9") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Online", x = "Experimental Treatments", title = "") +
theme_minimal()
ggsave(paste0(path_github,"Outputs/graph_correct_response_online.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
View(df)
names(df)
View(summary_df.p)
4.7/7
5.6/7
4.6/7
5.3/7
View(df)
load("C:/Users/DCCS2/Dropbox/Sitios web/Datos Piloto/Process_data_pensions_draft.Rdata")
View(df)
View(df.en)
View(df.en)
View(df.f)
View(df)
View(df)
View(df)
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
library(naniar)
library(nnet)
library(lmtest)
library(sandwich)
library(lubridate)
library(dplyr)
library(tidyr)
library(xtable)
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/Online Data/"
df <- readRDS(paste0(path_datos, "online_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
#rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/Online Data/"
df <- readRDS(paste0(path_datos, "online_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot <- ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill = "#A9A9A9") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7)) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Online", x = "Experimental Treatments", title = "") +
theme_minimal() +
theme(
axis.text = element_text(size = 16),     # Tick labels font size
axis.title = element_text(size = 18),    # Axis titles font size
plot.title = element_text(size = 20)     # Plot title font size
)
plot
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot <- ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill = "#A9A9A9") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7)) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Online", x = "Experimental Treatments", title = "") +
theme_minimal() +
theme(
axis.text = element_text(size = 16),     # Tick labels font size
axis.title = element_text(size = 18),    # Axis titles font size
plot.title = element_text(size = 20)     # Plot title font size
)
plot
ggsave(paste0(path_github,"Outputs/graph_correct_response_online.pdf"), plot = plot, width = 8, height = 6)
plot <- ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill = "#A9A9A9") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7)) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Online", x = "Experimental Treatments", title = "") +
theme_minimal() +
theme(
axis.text = element_text(size = 16),     # Tick labels font size
axis.title = element_text(size = 16),    # Axis titles font size
#  plot.title = element_text(size = 20)     # Plot title font size
)
plot
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
df.p <- df %>%
mutate(Treatments = recode(Treatments,
'Baseline' = 'Baseline',
'Perfil' = 'Profile',
'Video' = 'Video',
'VideoPerfil' = 'Profile and Video'))
summary_df.p <- df.p %>%
group_by(Treatments) %>%
summarise(
mean_response = mean(correct_response, na.rm=T),
sd_response = sd(correct_response, na.rm=T),
n = n(),
se = sd_response / sqrt(n),
ci_lower = mean_response - 1.96 * se,
ci_upper = mean_response + 1.96 * se
)
plot<-ggplot(summary_df.p, aes(x = Treatments, y = mean_response)) +
geom_bar(stat = "identity", fill="#696969") +
scale_y_continuous(breaks = 0:7, limits = c(0, 7))+
#scale_fill_manual(values = c("#D3D3D3", "#A9A9A9")) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
labs(y = "Number of Correct Responses - Lab", x = "Experimental Treatments", title = "") +
theme_minimal() +
theme(
axis.text = element_text(size = 16),     # Tick labels font size
axis.title = element_text(size = 18),    # Axis titles font size
#  plot.title = element_text(size = 20)     # Plot title font size
)
ggsave(paste0(path_github,"Outputs/graph_correct_response_lab.pdf"), plot = plot, width = 8, height = 6)
rm(df.p)
library(ggplot2)
library(scales)
power<-function (rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep){
mydata <- data.frame(samegroup=rep(c(T,F), each=N/2))
mydata$given <- 4.6 + mydata$samegroup * esize + sample(-0.5:0.5, N, replace=T)
p<- wilcox.test(given ~ samegroup, data=mydata, conf.int=T)
pv[i]<-p$p.value
power<-sum(pv < 0.05)/length(pv)
}
return(power)
}
# Resultado con un N fijo
power(rep=100, esize=0.8, N=30)
#Loop sobre la funci?n variando N
N<-seq(10, 200, 2)
M <- length(N)
N.power<- rep(NA, M)
for (i in 1:M){
N.power[i] <- power(rep=100, esize=0.8, N=N[i])
}
power<-function (rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep){
mydata <- data.frame(samegroup=rep(c(T,F), each=N/2))
mydata$given <- 4.6 + mydata$samegroup * esize + sample(-0.5:0.5, N, replace=T)
p<- wilcox.test(given ~ samegroup, data=mydata, conf.int=T)
pv[i]<-p$p.value
power<-sum(pv < 0.05)/length(pv)
}
return(power)
}
# Resultado con un N fijo
power(rep=100, esize=0.8, N=30)
#Loop sobre la funci?n variando N
N<-seq(10, 200, 2)
M <- length(N)
N.power<- rep(NA, M)
for (i in 1:M){
N.power[i] <- power(rep=100, esize=0.8, N=N[i])
}
for (i in 1:M){
N.power[i] <- power(rep=100, esize=0.8, N=N[i])
}
#graficar datos
plot(N.power,N/2, main="Power calculations", ylab="Number of obs in each group", xlab="Power")
power <- function(rep, esize, N) {
pv <- rep(NA, rep)  # Initialize p-values storage
for (i in 1:rep) {
# Generate the data
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
# Add normally distributed errors with sigma = 0.2
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 0.2)
# Fit the linear model
model <- lm(given ~ samegroup, data = mydata)
# Extract p-value for 'samegroup' coefficient
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
# Store p-value
pv[i] <- p
}
# Calculate power
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Single calculation with a fixed N
power(rep = 100, esize = 0.8, N = 30)
# Loop over multiple N values
N <- seq(10, 200, 2)
M <- length(N)
N.power <- rep(NA, M)
for (i in 1:M) {
N.power[i] <- power(rep = 100, esize = 0.8, N = N[i])
}
# Plot the power calculations
plot(N.power, N / 2, main = "Power calculations", ylab = "Number of obs in each group", xlab = "Power")
power <- function(rep, esize, N) {
pv <- rep(NA, rep)  # Initialize p-values storage
for (i in 1:rep) {
# Generate the data
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
# Add normally distributed errors with sigma = 0.2
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
# Fit the linear model
model <- lm(given ~ samegroup, data = mydata)
# Extract p-value for 'samegroup' coefficient
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
# Store p-value
pv[i] <- p
}
# Calculate power
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Single calculation with a fixed N
power(rep = 100, esize = 0.8, N = 30)
# Loop over multiple N values
N <- seq(10, 200, 2)
M <- length(N)
N.power <- rep(NA, M)
for (i in 1:M) {
N.power[i] <- power(rep = 100, esize = 0.8, N = N[i])
}
# Plot the power calculations
plot(N.power, N / 2, main = "Power calculations", ylab = "Number of obs in each group", xlab = "Power")
power <- function(rep, esize, N) {
pv <- rep(NA, rep)  # Initialize p-values storage
for (i in 1:rep) {
# Generate the data
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
# Add normally distributed errors with sigma = 0.2
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 0.5)
# Fit the linear model
model <- lm(given ~ samegroup, data = mydata)
# Extract p-value for 'samegroup' coefficient
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
# Store p-value
pv[i] <- p
}
# Calculate power
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Parameters
N <- seq(10, 100, 2)  # Sample sizes
effects <- seq(0.6, 0.9, by = 0.1)  # Effect sizes
# Initialize the matrix to store power values for each combination of N and effect size
m <- c(length(N), length(effects))
ne.power <- matrix(NA, m[1], m[2])
# Run the power calculations for different effect sizes and sample sizes
for (i in 1:m[1]) {
for (j in 1:m[2]) {
ne.power[i, j] <- power(rep = 100, esize = effects[j], N = N[i])
}
}
# Plotting the results
# Open a new default device
get(getOption("device"))()
# Set up a 3x2 plotting grid for multiple effect sizes
par(mfrow = c(3, 2))
# Plot the results for each effect size
for (j in 1:m[2]) {
plot(ne.power[, j], N / 2, type = "b", col = j,
main = paste("Effect size =", effects[j]),
xlim = c(0, 1), ylim = c(0, max(ne.power)),
ylab = "Number of obs in each group", xlab = "Power")
}
power <- function(rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep) {
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 0.2)
model <- lm(given ~ samegroup, data = mydata)
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
pv[i] <- p
}
power <- sum(pv < 0.05) / length(pv)
return(power)
}
N <- seq(10, 100, 2)  # Sample sizes to test
effects <- seq(0.6, 0.9, by = 0.1)  # Different effect sizes to test
M <- length(N)
K <- length(effects)
ne.power <- matrix(NA, nrow = M, ncol = K)
# Calculate power for each effect size and sample size
for (i in 1:M) {
for (j in 1:K) {
ne.power[i, j] <- power(rep = 500, esize = effects[j], N = N[i])
}
}
# Plot the results
par(mfrow = c(3, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
}
# Plot the results
par(mfrow = c(3, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
}
power <- function(rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep) {
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
model <- lm(given ~ samegroup, data = mydata)
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
pv[i] <- p
}
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Set up parameters for the simulation
N <- seq(10, 100, 2)  # Sample sizes to test
effects <- seq(0.6, 0.9, by = 0.1)  # Different effect sizes to test
M <- length(N)
K <- length(effects)
# Initialize a matrix to store power calculations for each (N, effect size) pair
ne.power <- matrix(NA, nrow = M, ncol = K)
# Calculate power for each effect size and sample size
for (i in 1:M) {
for (j in 1:K) {
ne.power[i, j] <- power(rep = 500, esize = effects[j], N = N[i])
}
}
# Plot the results
par(mfrow = c(3, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
}
